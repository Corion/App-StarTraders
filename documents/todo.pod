=head1 Things to do

=head2 UI mechanics

=over 4

=item *

Implement central user message facility instead of using
plain C<print> statements.

=item *

Display a map of the known universe

=item *

CommodityPositions should be able to construct their name appropriately
instead of the inconvenient "%d units of %s".

=item *

Restore tab completion

This seems to be an issue between Term::ReadLine(::Perl) and
Windows.

=back

=head2 Game mechanics

=over 4

=item *

Crib game mechanics from EVE

L<http://wiki.eveuniversity.org/Getting_Started_In_EVE_Online>

A ship seems to have some properties:

    CPU
    Power
    Tonnage
    ...

=item *

Implement a game director that places quests, items and
generates encounters and directs combats and other interactions.

This is partly the Demiurge, but maybe a separation of roles
between Demiurge, who creates and maintains the universe and
Game Director, who runs the interactions, is beneficial.

=item *

Implement a universal time ticker that governs production
etc. across the universe for the playtime. All actions
would be tied to a point in time.

=item *

Once there is a time ticker, implement a C<pass> command
that makes the player character pass time without changing
the position etc.

=item *

Implement time costs per action. Actions like loading/unloading cargo
might be bundled so that unloading two kinds of cargo takes the same
time as unloading one kind of cargo if these happen back to back?

=item *

Is travel through wormholes instantaneous? This has implications for
multiplayer (if ever) and factory production/consumption.

Also see the trap that turn-time and game-time/NPC-time pose. C<nethack>
has fixed turns of differing length that create a huge problem when two
players should interact.

=item *

Implement resource transformation journal that trails how/when/where entities
enter and leave the system. This is easy for trade/exchange
but how are consumables handled? Should fuel consumption
issue one log entry per (instantaneous) trip or should it
issue multiple entries as the journey progresses,
to preserve granularity/interruptability? The same
issue arises with factories that consume raw materials
to produce refined materials.

Potentially, just like with The Account System/Ledger, the amount of
raw and refined materials at a point in time is just the
sum of the journals for the place, at least up to the last
consolidation point. This would leave the burden of accounting
for the transformation with the transformator. If you start a
transformation and then interrupt or finish it, at that point
in time, the calculation needs to be updated with a new log
entry. This approach makes it harder to inspect the "current situation".
Maybe every such inspection causes a commit of the situation?

=item *

Implement tags that get attached to the player (or the ship) to trace
behaviour. Tags should be a hash, but what would be the value? Having
numerical values that can be incremented/decremented seems natural, but
prevents using string values. On the other hand, string values might
provide too much freedom.

  traded:ore
  traded:slave

  "You were a slave trader."

=item *

Implement achievements, nethack style

=back

=head2 NPC AI

=over 4

=item *

Implement "static" NPCs, that just sit around.

=item *

Implement a rule-based finite state machine to implement
finer NPC behaviour.

This FSM should have multiple levels to model different behaviours
like "survival", "fight", "interaction", "daily business".

Is L<Class::StateMachine> usable for our purposes of modelling
behaviour? It at least allows for hierarchical state machines.
It has the ugly approach of implementing/creating all classes
at compile time, but that's of little concern to us.

Maybe if we can use GraphViz to visualize the resulting programmed
state machine and its transitions, it makes devellopping and
debugging the state machines enjoyable/maintainable.

Alternatively, implement the graphing of the FSMs yourself
using L<GraphViz2>.

=item *

Consider interactions between player and NPC

=item *

Consider interactions between NPC and NPC

=item *

Implement "arbitrage" NPC traders that travel the universe, trading up
whenever they make a cut. Potentially, they should be slow but have unlimited
fuel.

=back

=head2 Missions

=over 4

=item *

Implement mission attributes as invisible, untradeable widgets
that attach to the player (instead of the ship?)

Attaching attributes to the ship has the advantage of aggravation
die-ing with the ship (assuming the player is immortal).

Missions themselves should be either bound to some tangible item, so the
mission ends when the tangible item is lost, or bound to the player character,
so the mission remains available to the player at all time.

=item *

Implement FedEx missions

=back

=head2 Economy

=over 4

=item *

C<< ship->can_pick_up >> should become C<< IsContainer->can_store >>

=item *

Implement trading posts with fixed prices

=item *

Random item generation should also have a "value limit"
to limit the total value of a stash.

Whether "levelling" of items/found stuff should be automatically
enabled through this is quite disputable. Likely, the value of things
should depend on the accessibility/danger of its environment instead.

=item *

Implement the transaction protocol for transactions
that occur in trade, like trading energy for commodities.
This is already partly implemented in C<Ship::swap>.

=item *

Implement commodity transfer between ships. This is interesting
as neither of the ships is I<within> the other. Potentially this
means abstracting out the Storage section of ::Ship into
a role that gets used among Places and Ships. Potentially
IsContainer should get those methods.

Maybe the spatial relation is just that I<both> ships need to be
docked to/in one space station.

=item *

Implement resource spawners like mines or farms that "produce"
commodities without resources other than time. These could sell
exclusively to the trading posts on the planet or directly
to the player if the player has bought them. Maybe the trading
post itself should simply be owned by the player in such a case.

Those spawners should at least be linear, but potentially
consist of a gaussian distribution around the linear displacement,
to keep things interesting. Calculation whether to spawn a resource
now would be based on the last time something was produced.

Potentially both, the point in time as well as the amount
should follow some distribution. Maybe a Poisson distribution
instead of a Gaussian distribution. See the discussion in Half-Life
(or somewhere there) on Poisson distributions resp. iterative
simulators for these.

=item *

Implement specialized trading posts that only trade
in specific product categories.

=item *

Would missions be "Just" specialized trading posts that (forcibly)
trade one quest item (tangible or not) against the next?

=item *

Implement equipment trading posts that trade ships, weapons
and other things to outfit the ship with.

=item *

Implement trading posts with variable prices depending
on the last delivery

=item *

Do commodities have a "kind" (like "food"/"weapon"/"slave") and
a specifc type?

=item *

Implement a "standard" set of commodities in L<Demiurge>

=item *

Implement loading the "standard" set from a file

=item *

Implement NPC traders that shuffle items around

=item *

L<https://www.youtube.com/watch?v=XeKbByu5eHQ>

If the system has multiplayer, add an (automatic?)
prevention of trade monopolies by having "alchemy"
to manufacture rare resources.

=item *

Have non-manufacturable items as random drops. These
also prevent monopolies on that market.

=item *

Have a sales tax or a broker fee to introduce
as a money sink in the system to prevent limitless
trading.

=back

=head2 Environment

=over 4

=item *

Implement "News" generator

=item *

Look at L<http://geonames.org> for (city, planet) names

=item *

Implement planetary and stellar properties, to add something
to the scenery

=over 4

=item *

Planetary Rings

=item *

Comets

=item *

Nebulae

=item *

Asteroid fields

=back

=back

=head2 Artwork

Will we use a web frontend? Or Firefox as a frontend?

=over 4

=item *

Implement a renderer for the graph of the known universe

=item *

Ship configuration artwork for the ship parts

=item *

Create commodity artwork

=back

